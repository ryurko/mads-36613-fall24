{
  "hash": "b01f28305f660f889d0f4a240a88e720",
  "result": {
    "markdown": "---\ntitle: \"Areal data and creating high-quality graphics\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[mads-36613-fall24](https://ryurko.github.io/mads-36613-fall24/)\"\ndate: 2024-09-30\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Reminders, previously, and today...\n\n+ **Infographic draft is due Wednesday night!** (more details later today...) \n\n+ **Your EDA report is due Friday Oct 4th by 11:59 PM ET** (1 per group)\n\n+ **No lecture on Wednesday! But I will have virtual office hours during class time**\n\n. . .\n\n+ Wrapped up basics of time series data\n\n+ Introduction to spatial data and the different types\n\n+ Walked through visualizing point-reference data\n\n. . .\n\n**TODAY:**\n\n+ Visualizations for areal data\n\n+ Discuss making high-quality graphics\n\n\n---\n\n## Thinking about areal data\n\n- __Areal Data__: Geographic regions associated with one or more variables specific to those regions\n\n- Areal data will have the following form (example US states data from 1970s):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstate_data |> dplyr::slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 9\n  Population Income Illiteracy `Life Exp` Murder `HS Grad` Frost   Area state  \n       <dbl>  <dbl>      <dbl>      <dbl>  <dbl>     <dbl> <dbl>  <dbl> <chr>  \n1       3615   3624        2.1       69.0   15.1      41.3    20  50708 alabama\n2        365   6315        1.5       69.3   11.3      66.7   152 566432 alaska \n3       2212   4530        1.8       70.6    7.8      58.1    15 113417 arizona\n```\n:::\n:::\n\n\n---\n\n## High-level overview of steps\n\n- Need to match the region with the actual geographic boundaries\n\n- Many geographic boundaries/features are stored as \"shapefiles\"\n\n  - i.e., complicated polygons\n  \n- Can contain the lines, points, etc. to represent any geographic feature\n\n- Shapefiles are readily available for countries, states, counties, etc.\n\n\n---\n\n## Access shapefiles using `map_data()` \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(maps)\nstate_borders <- map_data(\"state\") \nhead(state_borders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n```\n:::\n:::\n\n\n- For example: `map_data(\"world\")`, `map_data(\"state\")`, `map_data(\"county\")` (need to install [`maps` package](https://cran.r-project.org/web/packages/maps/maps.pdf))\n\n- Contains lat/lon coordinates to draw geographic boundaries\n\n---\n\n## Typica workflow for plotting areal data\n\n  1. Get state-specific data\n  \n  2. Get state boundaries\n  \n  3. Merge state-specific data with state boundaries (using `left_join()`)\n  \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstate_plot_data <- state_borders |>\n  left_join(state_data, by = c(\"region\" = \"state\"))\nhead(state_plot_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order  region subregion Population Income Illiteracy\n1 -87.46201 30.38968     1     1 alabama      <NA>       3615   3624        2.1\n2 -87.48493 30.37249     1     2 alabama      <NA>       3615   3624        2.1\n3 -87.52503 30.37249     1     3 alabama      <NA>       3615   3624        2.1\n4 -87.53076 30.33239     1     4 alabama      <NA>       3615   3624        2.1\n5 -87.57087 30.32665     1     5 alabama      <NA>       3615   3624        2.1\n6 -87.58806 30.32665     1     6 alabama      <NA>       3615   3624        2.1\n  Life Exp Murder HS Grad Frost  Area\n1    69.05   15.1    41.3    20 50708\n2    69.05   15.1    41.3    20 50708\n3    69.05   15.1    41.3    20 50708\n4    69.05   15.1    41.3    20 50708\n5    69.05   15.1    41.3    20 50708\n6    69.05   15.1    41.3    20 50708\n```\n:::\n:::\n\n  \n  \n  4. Plot the data\n\n---\n\n## Create a choropleth map with `geom_polygon()`\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nstate_plot_data |>\n  ggplot() + \n  geom_polygon(aes(x = long, y = lat, group = group, fill = Illiteracy), \n               color = \"black\") + \n  scale_fill_gradient2(low = \"darkgreen\", mid = \"lightgrey\", \n                       high = \"darkorchid4\", midpoint = 0.95) +\n  theme_void() +\n  coord_map(\"polyconic\") + \n  labs(fill = \"Illiteracy %\") + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Uniform size with [`statebins`](https://github.com/hrbrmstr/statebins)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(statebins)\nstate_data$new_state <- str_to_title(state_data$state)\nstatebins(state_data = state_data, \n          state_col = \"new_state\", value_col = \"Illiteracy\") +\n  theme_statebins()\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Many choices for displaying maps...\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://socviz.co/assets/ch-07-election-county-share.png){fig-align='center'}\n:::\n:::\n\n\n---\n\n## Visual randomization test\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Visual randomization test\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Infographics draft and feedback assignment\n\n+ **You turn in via Gradescope and email a single page PDF draft of your infographic to your assigned partner with myself cc'ed** by 11:59 PM Wednesday night (no code is necessary for this draft)\n\n+ For only this draft submission, you are allowed to use something like google slides or powerpoint to create your draft PDF\n\n+ Detailed grading rubric for your final submission (due Oct 11th by 11:59 PM ET) is posted on Canvas\n\n. . .\n\n+ **You must provide feedback to your assigned infographics partner via email (see emails I sent this morning) by Saturday night 11:59 PM ET and turn in via Gradescope as well**\n\n+ Feedback template is available on Canvas (and is 10% of your grade!)\n\n---\n\n## Creating compound figures\n\nTwo different scenarios we may face:\n\n1. Creating the same type of plot many times\n\n+ e.g., using `facet_wrap()` or `facet_grid()`\n\n2. Combining several distinct plots into one cohesive display\n\n+ e.g., using flexible arrangement packages like [`cowplot`](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html) or [`patchwork`](https://patchwork.data-imaginist.com/index.html)\n\n---\n\n## Creating the same type of plot many times\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_wrap(~species) +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Creating the same type of plot many times\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  facet_grid(island ~ species) +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Creating a single cohesive display of multiple plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 <- penguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5)\nplot1\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Creating a single cohesive display of multiple plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot2 <- penguins |>\n  ggplot(aes(x = species, y = bill_depth_mm)) +\n  geom_violin(alpha = 0.5)\nplot2\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Using [`cowplot`](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\nplot_grid(plot1, plot2)\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Using [`cowplot`](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\nplot_grid(plot1, plot2, labels = c('A', 'B'), label_size = 12)\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(patchwork)\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 / plot2\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot1 / plot2 + plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nplot3 <- penguins |>\n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm,\n             color = species)) +\n  geom_point(alpha = 0.5)\nplot4 <- penguins |>\n  ggplot(aes(x = bill_length_mm, y = body_mass_g,\n             color = species)) +\n  geom_point(alpha = 0.5)\n(plot1 + plot2) / (plot3 + plot4) + plot_layout(guides = 'collect')\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(plot1 + plot2) / (plot3 + plot4) + plot_layout(guides = 'collect') +\n  plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(plot1 + plot2) / (plot3 + plot4) + plot_layout(guides = 'collect') +\n  plot_annotation(tag_levels = \"A\", title = \"A plot about penguins\",\n                  subtitle = \"With subtitle...\", caption = \"...and caption\")\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Infographics vs figures in papers/reports\n\n+ Infographics should standalone, thus **they must have a title along with a relevant subtitle and caption** (located within the plot)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://clauswilke.com/dataviz/figure_titles_captions_files/figure-html/corruption-development-infographic-1.png){fig-align='center'}\n:::\n:::\n\n\n\n---\n\n## Infographics vs figures in papers/reports\n\n+ Figures in papers/reports will have captions containing the information from the standalone title/subtitle/caption, see example:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Figure 1. **Corruption and human development.** The most developed countries experience the least corruption. Data sources: Transparency International & UN Human Development Report.](https://clauswilke.com/dataviz/figure_titles_captions_files/figure-html/corruption-development-1.png){fig-align='center'}\n:::\n:::\n\n\n---\n\n## Thinking about themes...\n\n**See posted demo walking through color scales and customizing themes**\n\nDefault choices tend to treat each element with **equal weight**, e.g., axes stand out as much as the data or background elements look the same as the points of emphasis\n\n. . .\n\nYou want to design your plot with the **visual hierarchy** in mind:\n\n+ Make elements of your plot that are more important **look more important!**\n\n+ i.e., customize your plot so that the data is the focus, not the axes and grid lines!\n\n+ Match visual weight to focus of the graphic you want to communicate\n\n. . .\n\nI tend to use `theme_bw()` or `theme_light()`, but there are other options from various packages such as [`ggthemes`](https://jrnold.github.io/ggthemes/)\n\n---\n\n## Using [`patchwork`](https://patchwork.data-imaginist.com/index.html) to arrange plots together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(plot1 + plot2) / (plot3 + plot4) + plot_layout(guides = 'collect') +\n  plot_annotation(tag_levels = \"A\", title = \"A plot about penguins\",\n                  subtitle = \"With subtitle...\", caption = \"...and caption\") & \n  theme_minimal_grid()\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Annotation\n\n+ Using text can be a great way to highlight and explain aspects of a visualization when **you're not there to explain it**\n\n+ [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html) is an easy way to add text to ggplot objects or add rectangle layers for highlighting displays\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(x = wt, y = mpg)) + \n  geom_point() + \n  annotate(\"text\", x = 4, y = 25, label = \"Some text\") +\n  annotate(\"rect\", xmin = 3, xmax = 4.2, ymin = 12, ymax = 21, alpha = .2)\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Annotation tools\n\n+ We've discussed [`gghighlight`](https://cran.r-project.org/web/packages/gghighlight/vignettes/gghighlight.html) and [`ggrepel`](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html), but [`directlabels`](https://tdhock.github.io/directlabels/) and [`ggforce`](https://ggforce.data-imaginist.com/index.html) are also useful\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggforce)\nggplot(iris, aes(Petal.Length, Petal.Width)) +\n  geom_mark_rect(aes(fill = Species, label = Species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](10-areal-data-creating-graphics_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Saving plots\n\n+ Default function for saving the last ggplot you created is [`ggsave`](https://ggplot2.tidyverse.org/reference/ggsave.html)\n\n+ I tend to use the [`save_plot()`](https://wilkelab.org/cowplot/reference/save_plot.html) function from [`cowplot`](https://wilkelab.org/cowplot/index.html) since it has easier customization for handling panels of multiple figures\n\n---\n\n## Recap and next steps\n\n+ Walked through basics of visualizing areal data\n\n+ Discussed various aspects of making high-quality graphics and relevant tools\n\n+ **No lecture on Wednesday! But I will have virtual office hours during class time**\n\n+ **Infographic draft is due Wednesday night!** \n\n+ **Your EDA report is due Friday Oct 4th by 11:59 PM ET** (1 per group)\n\n+ [KH Chapter 7 Draw Maps](https://socviz.co/maps.html#maps), [creating bivariate choropleths](https://cran.r-project.org/web/packages/biscale/index.html), [CW Chapter 21 Multi-panel figures](https://clauswilke.com/dataviz/multi-panel-figures.html), [CW Chapter 23 Balance the data and the context](https://clauswilke.com/dataviz/balance-data-context.html), [KH Chapter 8 Refine your plots](https://socviz.co/refineplots.html#change-the-appearance-of-plots-with-themes)\n\n\n\n\n",
    "supporting": [
      "10-areal-data-creating-graphics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
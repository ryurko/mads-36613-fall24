{
  "hash": "84cab73c822daeda4a2731e34e2c9fc4",
  "result": {
    "markdown": "---\ntitle: \"2D Quantitative Data\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[mads-36613-fall24](https://ryurko.github.io/mads-36613-fall24/)\"\ndate: 2024-09-11\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Reminders, previously, and today...\n\n+ **HW2 is due TONIGHT!**\n\n+ **HW3 is posted and due next Wednesday Sept 18th**\n\n. . .\n\n+ Finished up discussion of 1D quantitative visualizations\n\n+ Discussed impact of bins on histograms\n\n+ Covered ECDFs and connection to KS-tests\n\n+ Walked through density estimation and ways of visualizing conditional distributions\n\n. . .\n\n**TODAY:**\n\n+ Visualize 2D quantitative data\n\n+ Discuss approaches for visualizing conditional and joint distributions\n\n\n---\n\n## 2D quantitative data\n\n- We're working with two variables: $(X, Y) \\in \\mathbb{R}^2$, i.e., dataset with $n$ rows and 2 columns\n\n. . .\n\n- Goals:\n\n  - describing the relationships between two variables\n  \n  - describing the conditional distribution $Y | X$ via regression analysis\n  \n  - describing the joint distribution $X,Y$ via contours, heatmaps, etc.\n  \n. . .\n\n- Few big picture ideas to keep in mind:\n\n  - scatterplots are by far the most common visual\n  \n  - regression analysis is by far the most popular analysis (you have a whole class on this...)\n  \n  - relationships may vary across other variables, e.g., categorical variables\n  \n---\n\n## Making scatterplots with `geom_point()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Making scatterplots: ALWAYS adjust the `alpha`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Displaying trend lines: linear regression\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Assessing assumptions of linear regression\n\nLinear regression assumes $Y_i \\overset{iid}{\\sim} N(\\beta_0 + \\beta_1 X_i, \\sigma^2)$\n\n- If this is true, then $Y_i - \\hat{Y}_i \\overset{iid}{\\sim} N(0, \\sigma^2)$\n\n. . .\n\nPlot residuals against $\\hat{Y}_i$, __residuals vs fit__ plot\n\n- Used to assess linearity, any divergence from mean 0\n\n- Used to assess equal variance, i.e., if $\\sigma^2$ is homogenous across predictions/fits $\\hat{Y}_i$\n\n. . .\n\nMore difficult to assess the independence and fixed $X$ assumptions\n\n- Make these assumptions based on subject-matter knowledge\n\n---\n\n## Residual vs fit plots\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlin_reg <- lm(body_mass_g ~ flipper_length_mm, data = penguins)\n\ntibble(fits = fitted(lin_reg), residuals = residuals(lin_reg)) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point(alpha = 0.5) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\")\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Residual vs fit plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\ntibble(fits = fitted(lin_reg), residuals = residuals(lin_reg)) |>\n  ggplot(aes(x = fits, y = residuals)) +\n  geom_point(alpha = 0.5) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Local linear regression via LOESS\n\n$Y_i \\overset{iid}{\\sim} N(f(x), \\sigma^2)$, where $f(x)$ is some unknown function\n\n. . .\n\nIn __local linear regression__, we estimate $f(X_i)$:\n\n$$\\text{arg }\\underset{\\beta_0, \\beta_1}{\\text{min}} \\sum_i^n w_i(x) \\cdot \\big(Y_i - \\beta_0 - \\beta_1 X_i \\big)^2$$ \n\n. . .\n\n`geom_smooth()` uses tri-cubic weighting:\n\n$$w_i(d_i) = \\begin{cases} (1 - |d_i|^3)^3, \\text{ if } i \\in \\text{neighborhood of  } x, \\\\\n0 \\text{ if } i \\notin \\text{neighborhood of  } x \\end{cases}$$\n\n  - $d_i$ is the distance between $x$ and $X_i$ scaled to be between 0 and 1\n  \n  - `span`: decides proportion of observations in neighborhood (default is 0.75)\n  \n---\n\n## Displaying trend lines: LOESS\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n*For $n > 1000$, `mgcv::gam()` is used with `formula = y ~ s(x, bs = \"cs\")` and `method = \"REML\"`*\n\n\n---\n\n## Displaying trend lines: LOESS\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(span = .1)\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Can also update formula within plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", formula = y ~ x + I(x^2))\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n*Exercise: check the updated residual plot with this model*\n\n---\n\n## What about focusing on the joint distribution?\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nExample [dataset of pitches](https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/ohtani_pitches_2023.csv) thrown by baseball superstar [Shohei Ohtani](https://www.baseball-reference.com/players/o/ohtansh01.shtml)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_point(alpha = 0.2) +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Going from 1D to 2D density estimation\n\nIn 1D: estimate density $f(x)$, assuming that $f(x)$ is _smooth_:\n\n$$\n\\hat{f}(x) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h} K_h(x - x_i)\n$$\n\n. . .\n\nIn 2D: estimate joint density $f(x_1, x_2)$\n\n$$\\hat{f}(x_1, x_2) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h_1h_2} K(\\frac{x_1 - x_{i1}}{h_1}) K(\\frac{x_2 - x_{i2}}{h_2})$$\n\n. . .\n\nIn 1D there was one bandwidth, now __we have two bandwidths__\n\n  - $h_1$: controls smoothness as $X_1$ changes, holding $X_2$ fixed\n  - $h_2$: controls smoothness as $X_2$ changes, holding $X_1$ fixed\n\nAgain Gaussian kernels are the most popular...\n\n---\n\n## So how do we display densities for 2D data?\n\n![](https://www.byclb.com/TR/Tutorials/neural_networks/Ch_4_dosyalar/image044.gif){fig-align=\"center\" width=60%}\n\n\n---\n\n## How to read contour plots?\n\nBest known in topology: outlines (contours) denote levels of elevation\n\n![](https://preview.redd.it/2rbe8s8t7re31.jpg?auto=webp&s=eed849b180dd803d394f556432df026c4cd1dae2){fig-align=\"center\" width=60%}\n\n\n---\n\n## Display 2D contour plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_point(alpha = 0.2) +\n  geom_density2d() +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Display 2D contour plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_density2d() +\n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Display 2D contour plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3,5\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  stat_density2d(aes(fill = after_stat(level)), geom = \"polygon\") +\n  coord_fixed() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Visualizing grid heat maps\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-4,6\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  stat_density2d(aes(fill = after_stat(density)), \n                 geom = \"tile\", contour = FALSE) + \n  coord_fixed() +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Alternative idea: hexagonal binning\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nohtani_pitches |>\n  ggplot(aes(x = plate_x, y = plate_z)) +\n  geom_hex() +\n  coord_fixed() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n### [LeBron James' shots](https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/lebron_shots.csv) from [`hoopR`](https://hoopr.sportsdataverse.org/)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nlebron_shots <- read_csv(\"https://raw.githubusercontent.com/ryurko/DataViz-Class-Data/main/lebron_shots.csv\")\nlebron_shots |>\n  ggplot(aes(x = coordinate_x, y = coordinate_y)) +\n  geom_point(alpha = 0.4) +\n  geom_density2d(binwidth = 0.0001) + \n  coord_fixed() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-2dquant_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n\n## Recap and next steps\n\n+ Use scatterplots to visualize 2D quantitative\n\n+ Be careful of over-plotting! May motivate contours or hexagonal bins...\n\n+ Discussed approaches for visualizing conditional relationships\n\n. . .\n\n+ **HW2 is due TONIGHT!**\n\n+ **HW3 is posted due next Wednesday Sept 18th**\n\n. . .\n\n+ **Next time**: Into high-dimensional data\n\n+ Recommended reading: \n\n+ [CW Chapter 12 Visualizing associations among two or more quantitative variables](https://clauswilke.com/dataviz/visualizing-associations.html)\n\n",
    "supporting": [
      "05-2dquant_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
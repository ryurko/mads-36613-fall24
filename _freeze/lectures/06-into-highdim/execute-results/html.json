{
  "hash": "2476bd9abb3da8436b9305aa5dc58b9f",
  "result": {
    "markdown": "---\ntitle: \"Into High-Dimensional Data\"\nauthor: \"Prof Ron Yurko\"\nfooter:  \"[mads-36613-fall24](https://ryurko.github.io/mads-36613-fall24/)\"\ndate: 2024-09-16\nengine: knitr\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    pdf-separate-fragments: true\n    slide-number: c/t\n    smaller: true\n    code-line-numbers: true\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n## Reminders, previously, and today...\n\n+ **HW3 is due Wednesday!**\n\n+ **HW4 is posted and due next Wednesday Sept 25th**\n\n. . .\n\n+ Walked through visualiziations with scatterplots (always adjust the alpha!)\n\n+ Displayed 2D joint distributions with contours, heatmaps, and hexagonal binning\n\n+ Discussed approaches for visualizing conditional relationships\n\n. . .\n\n**TODAY:**\n\n+ Into high-dimensional data\n\n+ What type of structure do we want to capture?\n\n\n---\n\n## Back to the penguins...\n\nPretend I give you this `penguins` dataset and I ask you to make a plot __for every pairwise comparison__...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |> slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n. . .\n\nWe can create a __pairs plot__ to see __all__ pairwise relationships __in one plot__\n\nPairs plot can include the various kinds of pairwise plots we've seen:\n\n- Two quantitative variables: scatterplot\n\n- One categorical, one quantitative: side-by-side violins, stacked\nhistograms, overlaid densities\n\n- Two categorical: stacked bars, side-by-side bars, mosaic plots\n\n---\n\n## Create pairs plots with [`GGally`](https://ggobi.github.io/ggally/index.html)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(GGally)\npenguins |> ggpairs(columns = 3:6)\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Create pairs plots with [`GGally`](https://ggobi.github.io/ggally/index.html)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npenguins |> ggpairs(columns = 3:6,\n                    mapping = aes(alpha = 0.5))\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Flexibility in customization\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\npenguins |> \n  ggpairs(columns = c(\"bill_length_mm\", \"body_mass_g\", \"island\"),\n          mapping = aes(alpha = 0.5, color = species), \n          lower = list(\n            continuous = \"smooth_lm\", \n            combo = \"facetdensitystrip\"\n          ),\n          upper = list(\n            continuous = \"cor\",\n            combo = \"facethist\"\n          )\n  )\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## See Demo 03 for more!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## What about high-dimensional data?\n\nConsider this [dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-12-21/readme.md) containing nutritional information about Starbucks drinks:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- \n  read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\") |>\n  # Convert columns to numeric that were saved as character\n  mutate(trans_fat_g = as.numeric(trans_fat_g), fiber_g = as.numeric(fiber_g))\nstarbucks |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 15\n  product_name              size   milk  whip serv_size_m_l calories total_fat_g\n  <chr>                     <chr> <dbl> <dbl>         <dbl>    <dbl>       <dbl>\n1 brewed coffee - dark roa… short     0     0           236        3         0.1\n# ℹ 8 more variables: saturated_fat_g <dbl>, trans_fat_g <dbl>,\n#   cholesterol_mg <dbl>, sodium_mg <dbl>, total_carbs_g <dbl>, fiber_g <dbl>,\n#   sugar_g <dbl>, caffeine_mg <dbl>\n```\n:::\n:::\n\n\n\n**How do we visualize this dataset? **\n\n- Tedious task: make a series of pairs plots (one giant pairs plot would overwhelming)\n\n\n---\n\n## What about high-dimensional data?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks <- \n  read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-12-21/starbucks.csv\") |>\n  # Convert columns to numeric that were saved as character\n  mutate(trans_fat_g = as.numeric(trans_fat_g), fiber_g = as.numeric(fiber_g))\nstarbucks |> slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 15\n  product_name              size   milk  whip serv_size_m_l calories total_fat_g\n  <chr>                     <chr> <dbl> <dbl>         <dbl>    <dbl>       <dbl>\n1 brewed coffee - dark roa… short     0     0           236        3         0.1\n# ℹ 8 more variables: saturated_fat_g <dbl>, trans_fat_g <dbl>,\n#   cholesterol_mg <dbl>, sodium_mg <dbl>, total_carbs_g <dbl>, fiber_g <dbl>,\n#   sugar_g <dbl>, caffeine_mg <dbl>\n```\n:::\n:::\n\n\n**Goals to keep in mind with visualizing high-dimensional data:**\n\n- __Visualize structure among observations__ based on distances and projections (next lecture)\n\n- __Visualize structure among variables__ using correlation as \"distance\"\n\n---\n\n## Correlogram to visualize correlation matrix\n\nUse the [`ggcorrplot`](https://rpkgs.datanovia.com/ggcorrplot/) package:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks_quant_cor <- cor(dplyr::select(starbucks, serv_size_m_l:caffeine_mg))\n\nlibrary(ggcorrplot)\nggcorrplot(starbucks_quant_cor)\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Options to customize correlogram \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nggcorrplot(starbucks_quant_cor,\n           type = \"lower\", method = \"circle\")\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n---\n\n## Reorder variables based on correlation\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggcorrplot(starbucks_quant_cor,\n           type = \"lower\", method = \"circle\",\n           hc.order = TRUE)\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Heatmap displays of observations\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nheatmap(as.matrix(dplyr::select(starbucks, serv_size_m_l:caffeine_mg)),\n        scale = \"column\", \n        labRow = starbucks$product_name,\n        cexRow = .5, cexCol = .75,\n        Rowv = NA, Colv = NA)\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Manual version of heatmaps\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nstarbucks |>\n  dplyr::select(product_name, serv_size_m_l:caffeine_mg) |>\n  pivot_longer(serv_size_m_l:caffeine_mg,\n               names_to = \"variable\",\n               values_to = \"raw_value\") |>\n  group_by(variable) |>\n  mutate(std_value = (raw_value - mean(raw_value)) / sd(raw_value)) |>\n  ungroup() |>\n  ggplot(aes(y = variable, x = product_name, fill = std_value)) +\n  geom_tile() +\n  theme_light() +\n  theme(axis.text.x = element_text(size = 1, angle = 45),\n        legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Manual version of heatmaps\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nstarbucks |>\n  dplyr::select(product_name, serv_size_m_l:caffeine_mg) |>\n  mutate(product_name = fct_reorder(product_name, calories)) |>\n  pivot_longer(serv_size_m_l:caffeine_mg,\n               names_to = \"variable\",\n               values_to = \"raw_value\") |>\n  group_by(variable) |>\n  mutate(std_value = (raw_value - mean(raw_value)) / sd(raw_value)) |>\n  ungroup() |>\n  ggplot(aes(y = variable, x = product_name, fill = std_value)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"darkblue\", high = \"darkorange\") +\n  theme_light() +\n  theme(axis.text.x = element_text(size = 1, angle = 45),\n        legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Parallel coordinates plot with [`ggparcoord`](https://ggobi.github.io/ggally/reference/ggparcoord.html)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarbucks |>\n  ggparcoord(columns = 5:15, alphaLines = .1) + #<<\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![](06-into-highdim_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Recap and next steps\n\n+ Discussed creating pairs plots for initial inspection of several variables\n\n+ Began thinking about ways to displays dataset structure via correlations\n\n+ Used heatmaps and parallel coordinates plot to capture observation and variable structure\n\n. . .\n\n+ **HW3 is due Wednesday!**\n\n+ **HW4 is posted due next Wednesday Sept 25th**\n\n. . .\n\n+ **Next time**: More high-dimensional data\n\n+ Recommended reading: \n\n+ [CW Chapter 12 Visualizing associations among two or more quantitative variables](https://clauswilke.com/dataviz/visualizing-associations.html)\n\n\n\n\n",
    "supporting": [
      "06-into-highdim_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}